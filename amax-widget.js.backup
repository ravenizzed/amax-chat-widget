/*
 * amax-widget.js — AMAX Insurance BI Chat Widget
 *
 * Usage: Embed in any page to load the chat widget:
 * <script src="https://your-domain.com/widget/amax-widget.js"></script>
 */

(function() {
  // Configuration
  const WIDGET_CONFIG = {
    // n8n webhook endpoint (proxied via your domain)
    webhookUrl: window.location.origin + '/widget/webhook/amax-genBi',
    // Logo served from the widget assets
    logoUrl: window.location.origin + '/widget/assets/amax-insurance-logo.jpg',
    rateLimit: 2000,       // milliseconds between messages
    timeout: 120000,       // fetch timeout (2 minutes)
    maxHistory: 10         // max quick history items
  };

  // ===== Inject CSS =====
  const styles = `
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; }
    :root {
      --amax-red: #DC143C;
      --amax-yellow: #FFD700;
      --amax-dark: #1a1a1a;
      --amax-gray: #f5f5f5;
      --amax-white: #ffffff;
      --shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    }
    .amax-widget-btn {
      position: fixed; bottom: 20px; right: 20px;
      width: 60px; height: 60px;
      background: var(--amax-red);
      border-radius: 50%; cursor: pointer;
      box-shadow: var(--shadow); transition: all 0.3s ease;
      z-index: 9999; display: flex;
      align-items: center; justify-content: center;
    }
    .amax-widget-btn:hover {
      transform: scale(1.1);
      box-shadow: 0 15px 50px rgba(220,20,60,0.4);
    }
    .amax-chat {
      position: fixed; bottom: 90px; right: 20px;
      width: 900px; height: 700px;
      background: var(--amax-white);
      border-radius: 20px; box-shadow: var(--shadow);
      display: none; overflow: hidden;
      z-index: 9998; flex-direction: column;
    }
    .amax-chat.open { display: flex; animation: slideIn 0.3s ease-out; }
    @keyframes slideIn {
      from { opacity: 0; transform: translateY(30px) scale(0.95); }
      to   { opacity: 1; transform: translateY(0) scale(1); }
    }
    .amax-header {
      background: var(--amax-red); color: white;
      padding: 20px 25px; display: flex;
      justify-content: space-between; align-items: center;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .amax-header h2 { font-size:22px; font-weight:600; display:flex; align-items:center; gap:10px; }
    .logo-icon {
      background:white; color:var(--amax-red);
      width:35px; height:35px; border-radius:8px;
      display:flex; align-items:center;
      justify-content:center; font-weight:bold;
    }
    .amax-close {
      background:none; border:none; color:white;
      font-size:28px; cursor:pointer; padding:5px;
      border-radius:50%; width:40px; height:40px;
      display:flex; align-items:center;
      justify-content:center; transition: background 0.2s;
    }
    .amax-close:hover { background: rgba(255,255,255,0.2); }
    .amax-main { display:flex; flex:1; overflow:hidden; }
    .amax-sidebar {
      width:280px; background:var(--amax-gray);
      border-right:1px solid #e0e0e0;
      display:flex; flex-direction:column;
    }
    .sidebar-section { padding:20px; border-bottom:1px solid #e0e0e0; }
    .sidebar-section h3 {
      font-size:14px; font-weight:600;
      color:var(--amax-dark);
      margin-bottom:15px;
      text-transform:uppercase;
      letter-spacing:0.5px;
    }
    .quick-question {
      display:block; width:100%; text-align:left;
      padding:12px 15px; margin-bottom:8px;
      background:white; border:1px solid #ddd;
      border-radius:10px; font-size:13px;
      color:var(--amax-dark); cursor:pointer;
      transition: all 0.2s;
    }
    .quick-question:hover {
      background:var(--amax-red);
      color:white; border-color:var(--amax-red);
      transform: translateX(5px);
    }
    .history-section { flex:1; overflow-y:auto; padding:20px; }
    .history-item {
      padding:10px 15px; margin-bottom:5px;
      background:white; border-radius:8px;
      font-size:13px; color:#666;
      cursor:pointer; white-space:nowrap;
      overflow:hidden; text-overflow:ellipsis;
      transition: all 0.2s;
    }
    .history-item:hover { background:var(--amax-red); color:white; }
    .amax-chat-area {
      flex:1; display:flex;
      flex-direction:column; background:white;
    }
    .amax-messages {
      flex:1; padding:30px;
      overflow-y:auto; display:flex;
      flex-direction:column; gap:20px;
    }
    .amax-msg {
      max-width:70%; padding:15px 20px;
      border-radius:15px; font-size:15px;
      line-height:1.6; animation:msgFade 0.3s ease;
    }
    @keyframes msgFade {
      from { opacity:0; transform: translateY(10px); }
      to   { opacity:1; transform: translateY(0); }
    }
    .amax-msg.user {
      background:var(--amax-red);
      color:white; align-self:flex-end;
      border-bottom-right-radius:5px;
    }
    .amax-msg.bot {
      background:var(--amax-gray);
      color:var(--amax-dark);
      align-self:flex-start;
      border-bottom-left-radius:5px;
    }
    .amax-msg.error {
      background:#fee; color:#d00;
      border:1px solid #fcc;
    }
    .chart-container {
      margin:10px 0; padding:15px;
      background:white; border-radius:10px;
      border:1px solid #e0e0e0;
    }
    .amax-typing {
      display:none; align-self:flex-start;
      padding:15px 20px; background:var(--amax-gray);
      border-radius:15px; border-bottom-left-radius:5px;
    }
    .typing-dots { display:flex; gap:5px; }
    .typing-dots span {
      width:10px; height:10px;
      background:#999; border-radius:50%;
      animation:typingDot 1.4s infinite ease-in-out;
    }
    .typing-dots span:nth-child(2) { animation-delay:0.2s; }
    .typing-dots span:nth-child(3) { animation-delay:0.4s; }
    @keyframes typingDot {
      0%,80%,100% { transform: scale(0.8); opacity:0.5; }
      40% { transform: scale(1); opacity:1; }
    }
    .amax-input-area {
      padding:20px 30px; border-top:1px solid #e0e0e0;
      background:white; display:flex; gap:15px;
      align-items:center;
    }
    .amax-input {
      flex:1; padding:15px 20px;
      border:2px solid #e0e0e0; border-radius:25px;
      font-size:15px; outline:none; transition:all 0.2s;
    }
    .amax-input:focus { border-color:var(--amax-red); }
    .amax-send {
      padding:15px 30px; background:var(--amax-red);
      color:white; border:none; border-radius:25px;
      font-size:15px; font-weight:600;
      cursor:pointer; transition:all 0.2s;
      white-space:nowrap;
    }
    .amax-send:hover:not(:disabled) {
      background:#b91c3c; transform: scale(1.05);
    }
    .amax-send:disabled { background:#ccc; cursor:not-allowed; }
    .rate-limit-warning {
      display:none; padding:10px;
      background:#fff3cd; color:#856404;
      border-radius:8px; font-size:14px;
      margin-bottom:10px;
    }
    @media (max-width:950px) {
      .amax-chat { width:100vw; height:100vh; bottom:0; right:0; left:0; top:0; border-radius:0; }
      .amax-sidebar { display:none; }
      .amax-widget-btn { bottom:20px; right:20px; z-index:10000; }
      .amax-messages { padding:20px; }
      .amax-msg { max-width:85%; }
      .amax-input-area { padding:15px; position:sticky; bottom:0; background:white; box-shadow:0 -2px 10px rgba(0,0,0,0.1); }
      .amax-send { padding:15px 20px; }
    }
    @media (max-width:400px) {
      .amax-header h2 { font-size:18px; }
      .amax-input { font-size:14px; padding:12px 15px; }
      .amax-send { padding:12px 15px; font-size:14px; }
    }
  `;
  const styleTag = document.createElement('style');
  styleTag.textContent = styles;
  document.head.appendChild(styleTag);

  // ===== Inject HTML =====
  const widgetHTML = `
    <div class="amax-widget-btn" id="amaxWidget">
      <img src="${WIDGET_CONFIG.logoUrl}" alt="AMAX BI Assistant" style="width:30px;">
    </div>
    <div class="amax-chat" id="amaxChat">
      <div class="amax-header">
        <div class="logo">
          <div class="logo-icon">
            <img src="${WIDGET_CONFIG.logoUrl}" alt="AMAX" style="width:20px;">
          </div>
          <h2>AMAX BI Assistant</h2>
        </div>
        <button class="amax-close" id="amaxClose">×</button>
      </div>
      <div class="amax-main">
        <div class="amax-sidebar">
          <div class="sidebar-section">
            <h3>Quick Questions</h3>
            <div id="quickQuestions"></div>
          </div>
          <div class="history-section">
            <h3>History</h3>
            <div id="chatHistory"></div>
          </div>
        </div>
        <div class="amax-chat-area">
          <div class="amax-messages" id="messages">
            <div class="amax-msg bot">Welcome to AMAX! I'm your BI Assistant. How can I help with our insurance data today?</div>
          </div>
          <div class="amax-typing" id="typing">
            <div class="typing-dots"><span></span><span></span><span></span></div>
          </div>
          <div class="rate-limit-warning" id="rateLimitWarning">Please wait a moment before sending another message...</div>
          <div class="amax-input-area">
            <input type="text" class="amax-input" id="userInput" placeholder="Ask about premium, policies, agents..." autocomplete="off">
            <button class="amax-send" id="sendBtn">Send</button>
          </div>
        </div>
      </div>
    </div>
  `;
  const container = document.createElement('div');
  container.innerHTML = widgetHTML;
  document.body.appendChild(container);

  // ===== Widget Logic =====
  const QUESTIONS = [
    "What was the total premium last quarter?",
    "Show me new business count by month for this year",
    "Who are the top 5 agents by premium?",
    "Show total payments by payment method",
    "What is the policy renewal rate?"
  ];

  let history = [];
  let lastTime = 0;
  let processing = false;

  // DOM refs
  const amaxBtn = document.getElementById('amaxWidget');
  const chatWin = document.getElementById('amaxChat');
  const closeBtn = document.getElementById('amaxClose');
  const msgArea = document.getElementById('messages');
  const inputEl = document.getElementById('userInput');
  const sendBtnEl = document.getElementById('sendBtn');
  const typingEl = document.getElementById('typing');
  const quickQEl = document.getElementById('quickQuestions');
  const histEl = document.getElementById('chatHistory');
  const rateWarn = document.getElementById('rateLimitWarning');

  function init() {
    // populate quick questions
    QUESTIONS.forEach(q => {
      const btn = document.createElement('button');
      btn.className = 'quick-question';
      btn.textContent = q;
      btn.onclick = () => sendMessage(q);
      quickQEl.appendChild(btn);
    });

    amaxBtn.onclick = openChat;
    closeBtn.onclick = closeChat;
    sendBtnEl.onclick = () => sendMessage();
    inputEl.onkeypress = e => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); sendMessage(); }};
  }

  function openChat() {
    chatWin.classList.add('open');
    inputEl.focus();
  }
  function closeChat() {
    chatWin.classList.remove('open');
  }
  function addHistory(txt) {
    history.unshift(txt);
    if (history.length > WIDGET_CONFIG.maxHistory) history.pop();
    histEl.innerHTML = '';
    history.forEach(h => {
      const div = document.createElement('div');
      div.className = 'history-item';
      div.textContent = h;
      div.onclick = () => sendMessage(h);
      histEl.appendChild(div);
    });
  }
  function appendMessage(content, isUser=false, isError=false) {
    const div = document.createElement('div');
    div.className = 'amax-msg ' + (isError ? 'error' : isUser ? 'user' : 'bot');
    if (typeof content === 'string') div.innerHTML = content.replace(/\n/g, '<br>');
    else div.appendChild(content);
    msgArea.appendChild(div);
    msgArea.scrollTop = msgArea.scrollHeight;
  }
  function showTyping() { typingEl.style.display = 'block'; msgArea.scrollTop = msgArea.scrollHeight; }
  function hideTyping() { typingEl.style.display = 'none'; }
  function showRate() { rateWarn.style.display = 'block'; setTimeout(() => rateWarn.style.display = 'none', WIDGET_CONFIG.rateLimit); }

  async function renderChart(spec) {
    const wrapper = document.createElement('div');
    wrapper.className = 'chart-container';
    const chartDiv = document.createElement('div');
    wrapper.appendChild(chartDiv);
    try {
      await vegaEmbed(chartDiv, spec, { renderer:'svg', actions:false, theme:'latimes', width:chartDiv.parentElement.offsetWidth > 400 ? 400 : chartDiv.parentElement.offsetWidth - 100 });
    } catch(e) {
      wrapper.innerHTML = '<p style="color:#666;">Unable to render chart.</p>';
    }
    return wrapper;
  }

  async function processResp(data) {
    const text = typeof data.response === 'string' ? data.response : JSON.stringify(data.response, null, 2);
    const jsonMatch = text.match(/\{[\s\S]*?\$schema[\s\S]*?\}/);
    if (jsonMatch) {
      const before = text.slice(0, jsonMatch.index);
      const specText = jsonMatch[0];
      const after = text.slice(jsonMatch.index + specText.length);
      const container = document.createElement('div');
      if (before.trim()) container.appendChild(Object.assign(document.createElement('div'), {innerHTML: before.replace(/\n/g,'<br>')}));
      try {
        const spec = JSON.parse(specText);
        container.appendChild(await renderChart(spec));
      } catch(e) {
        container.appendChild(Object.assign(document.createElement('div'), {innerHTML: specText.replace(/\n/g,'<br>')}));
      }
      if (after.trim()) container.appendChild(Object.assign(document.createElement('div'), {innerHTML: after.replace(/\n/g,'<br>')}));
      return container;
    }
    return Object.assign(document.createElement('div'), {innerHTML: text.replace(/\n/g,'<br>')});
  }

  async function sendMessage(text) {
    const msg = text || inputEl.value.trim();
    if (!msg) return;
    const now = Date.now();
    if (processing || now - lastTime < WIDGET_CONFIG.rateLimit) { showRate(); return; }
    lastTime = now; processing = true;
    inputEl.value = '';
    appendMessage(msg, true);
    addHistory(msg);
    inputEl.disabled = sendBtnEl.disabled = true;
    showTyping();

    try {
      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), WIDGET_CONFIG.timeout);
      const res = await fetch(WIDGET_CONFIG.webhookUrl, {
        method: 'POST',
        headers: {'Content-Type': 'application/json', 'Accept':'application/json'},
        body: JSON.stringify({ question: msg }),
        signal: controller.signal
      });
      clearTimeout(timeout);
      if (!res.ok) throw new Error('Status '+res.status);
      const data = await res.json();
      const contentEl = await processResp(data);
      appendMessage(contentEl, false);
    } catch(err) {
      console.error(err);
      appendMessage(err.name==='AbortError' ? 'Request timed out.' : 'Connection error.', false, true);
    } finally {
      hideTyping(); processing = false;
      inputEl.disabled = sendBtnEl.disabled = false;
      inputEl.focus();
    }
  }

  // Initialize widget
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
