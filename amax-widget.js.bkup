/*
 * amax-widget.js — AMAX Insurance BI Chat Widget
 * Updated with corrected chart parser for WrenAI API deconstructed format
 */
(function() {
    'use strict';

    const CONFIG = {
        webhookUrl: '/api/webhook',
        logoUrl: 'https://raw.githubusercontent.com/ravenizzed/amax-chat-widget/main/assets/amax-logo-A.png',
        rateLimit: 2000,
        timeout: 30000
    };

    let vegaEmbed = null;
    
    async function loadVegaLite() {
        if (window.vegaEmbed) {
            vegaEmbed = window.vegaEmbed;
            return;
        }
        
        return new Promise((resolve, reject) => {
            const script1 = document.createElement('script');
            script1.src = 'https://cdn.jsdelivr.net/npm/vega@5';
            script1.onload = () => {
                const script2 = document.createElement('script');
                script2.src = 'https://cdn.jsdelivr.net/npm/vega-lite@5';
                script2.onload = () => {
                    const script3 = document.createElement('script');
                    script3.src = 'https://cdn.jsdelivr.net/npm/vega-embed@6';
                    script3.onload = () => {
                        vegaEmbed = window.vegaEmbed;
                        resolve();
                    };
                    script3.onerror = reject;
                    document.head.appendChild(script3);
                };
                script2.onerror = reject;
                document.head.appendChild(script2);
            };
            script1.onerror = reject;
            document.head.appendChild(script1);
        });
    }

    const styles = `
        body {
            margin: 0 !important;
            padding: 0 !important;
            background: transparent !important;
            overflow: hidden !important;
        }

        .amax-widget-btn {
            position: fixed !important;
            bottom: 20px !important;
            right: 20px !important;
            width: 60px !important;
            height: 60px !important;
            background: #DC143C !important;
            border: none !important;
            border-radius: 50% !important;
            cursor: pointer !important;
            box-shadow: 0 4px 20px rgba(220, 20, 60, 0.3) !important;
            z-index: 999999 !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            transition: all 0.3s ease !important;
        }

        .amax-widget-btn:hover {
            transform: scale(1.1) !important;
            box-shadow: 0 6px 30px rgba(220, 20, 60, 0.4) !important;
        }

        .amax-widget-btn img {
            width: 32px !important;
            height: 32px !important;
            object-fit: contain !important;
            border-radius: 6px !important;
            background: white !important;
            padding: 2px !important;
        }

        .amax-chat {
            position: fixed !important;
            bottom: 10px !important;
            right: 10px !important;
            width: 900px !important;
            height: 850px !important;
            background: white !important;
            border-radius: 20px !important;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2) !important;
            display: none !important;
            overflow: hidden !important;
            z-index: 999998 !important;
            flex-direction: column !important;
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif !important;
        }

        .amax-chat.open {
            display: flex !important;
            animation: amaxSlideIn 0.3s ease-out !important;
        }

        @keyframes amaxSlideIn {
            from { opacity: 0; transform: translateY(30px) scale(0.95); }
            to { opacity: 1; transform: translateY(0) scale(1); }
        }

        .amax-header {
            background: linear-gradient(135deg, #DC143C, #B91C3C) !important;
            color: white !important;
            padding: 20px 25px !important;
            display: flex !important;
            justify-content: space-between !important;
            align-items: center !important;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1) !important;
        }

        .amax-header .logo {
            display: flex !important;
            align-items: center !important;
            gap: 12px !important;
        }

        .amax-header .logo-icon {
            background: white !important;
            color: #DC143C !important;
            width: 45px !important;
            height: 45px !important;
            border-radius: 12px !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            font-weight: bold !important;
            font-size: 18px !important;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
        }

        .amax-header .logo-icon img {
            width: 28px !important;
            height: 28px !important;
            object-fit: contain !important;
        }

        .amax-header h2 {
            font-size: 22px !important;
            font-weight: 600 !important;
            margin: 0 !important;
            letter-spacing: 0.5px !important;
        }

        .amax-close {
            background: rgba(255,255,255,0.1) !important;
            border: none !important;
            color: white !important;
            font-size: 24px !important;
            cursor: pointer !important;
            padding: 8px !important;
            border-radius: 50% !important;
            width: 38px !important;
            height: 38px !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            transition: all 0.2s !important;
        }

        .amax-close:hover {
            background: rgba(255,255,255,0.2) !important;
            transform: scale(1.1) !important;
        }

        .amax-main {
            display: flex !important;
            height: calc(100% - 82px) !important;
        }

        .amax-sidebar {
            width: 160px !important;
            background: linear-gradient(180deg, #f8f9fa, #f1f3f4) !important;
            border-right: 1px solid #e9ecef !important;
            padding: 15px 10px !important;
            overflow-y: auto !important;
            font-size: 12px !important;
        }

        .amax-sidebar h3 {
            margin: 0 0 10px 0 !important;
            font-size: 11px !important;
            font-weight: 700 !important;
            color: #666 !important;
            text-transform: uppercase !important;
            letter-spacing: 1px !important;
        }

        .amax-sidebar .quick-btn {
            display: block !important;
            width: 100% !important;
            padding: 12px 10px !important;
            margin: 4px 0 !important;
            background: white !important;
            border: 1px solid #e9ecef !important;
            border-radius: 6px !important;
            font-size: 12px !important;
            color: #495057 !important;
            cursor: pointer !important;
            transition: all 0.2s !important;
            line-height: 1.3 !important;
            text-align: left !important;
            font-weight: 500 !important;
        }

        .amax-sidebar .quick-btn:hover {
            background: #DC143C !important;
            color: white !important;
            border-color: #DC143C !important;
            transform: translateY(-1px) !important;
        }

        .random-btn {
            background: linear-gradient(135deg, #28a745, #20c997) !important;
            color: white !important;
            border: none !important;
            padding: 10px 8px !important;
            border-radius: 6px !important;
            font-size: 10px !important;
            cursor: pointer !important;
            margin: 8px 0 !important;
            transition: all 0.2s !important;
            font-weight: 600 !important;
            text-transform: uppercase !important;
            letter-spacing: 0.5px !important;
            width: 100% !important;
        }

        .random-btn:hover {
            background: linear-gradient(135deg, #218838, #1e7e34) !important;
            transform: translateY(-1px) !important;
        }

        .disclaimer {
            font-size: 8px !important;
            color: #999 !important;
            font-style: italic !important;
            margin-top: 5px !important;
            line-height: 1.2 !important;
        }

        .history-section {
            margin-top: 20px !important;
        }

        .history-container {
            max-height: 150px !important;
            overflow-y: auto !important;
        }

        .history-item {
            padding: 8px 6px !important;
            margin: 3px 0 !important;
            background: white !important;
            border-radius: 4px !important;
            font-size: 10px !important;
            color: #666 !important;
            cursor: pointer !important;
            border: 1px solid #e9ecef !important;
            line-height: 1.3 !important;
            font-weight: 500 !important;
        }

        .history-item:hover {
            background: #f0f0f0 !important;
        }

        .amax-chat-area {
            flex: 1 !important;
            display: flex !important;
            flex-direction: column !important;
            width: 700px !important;
        }

        .amax-messages {
            flex: 1 !important;
            padding: 30px !important;
            overflow-y: auto !important;
            font-size: 16px !important;
            line-height: 1.6 !important;
            background: #fafbfc !important;
        }

        .amax-msg {
            margin: 15px 0 !important;
            padding: 16px 20px !important;
            border-radius: 20px !important;
            max-width: 80% !important;
            word-wrap: break-word !important;
            line-height: 1.6 !important;
            font-size: 16px !important;
            font-weight: 400 !important;
        }

        .amax-msg.user {
            background: linear-gradient(135deg, #DC143C, #B91C3C) !important;
            color: white !important;
            margin-left: auto !important;
            border-bottom-right-radius: 6px !important;
            font-weight: 500 !important;
            box-shadow: 0 2px 10px rgba(220, 20, 60, 0.2) !important;
        }

        .amax-msg.bot {
            background: white !important;
            color: #333 !important;
            margin-right: auto !important;
            border-bottom-left-radius: 6px !important;
            border: 1px solid #e9ecef !important;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05) !important;
        }

        .amax-msg.error {
            background: #fee !important;
            color: #c33 !important;
            border: 1px solid #fcc !important;
        }

        .chart-container {
            margin: 20px 0 !important;
            padding: 20px !important;
            background: white !important;
            border-radius: 12px !important;
            border: 1px solid #e9ecef !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08) !important;
        }

        .chart-error {
            color: #DC143C !important;
            font-weight: 600 !important;
            padding: 15px !important;
            background: #fff5f5 !important;
            border: 2px solid #fecaca !important;
            border-radius: 10px !important;
            margin: 15px 0 !important;
            text-align: center !important;
        }

        .debug-info {
            background: #f8f9fa !important;
            border: 1px solid #dee2e6 !important;
            border-radius: 6px !important;
            padding: 10px !important;
            margin: 10px 0 !important;
            font-size: 12px !important;
            color: #6c757d !important;
            font-family: monospace !important;
        }

        .response-text {
            margin-bottom: 15px !important;
            line-height: 1.6 !important;
        }

        .amax-input-area {
            padding: 20px !important;
            border-top: 1px solid #e9ecef !important;
            display: flex !important;
            gap: 15px !important;
            align-items: center !important;
            background: white !important;
        }

        .amax-input {
            flex: 1 !important;
            padding: 14px 20px !important;
            border: 2px solid #e9ecef !important;
            border-radius: 25px !important;
            font-size: 16px !important;
            outline: none !important;
            font-family: inherit !important;
            background: #fafbfc !important;
            transition: all 0.2s !important;
        }

        .amax-input:focus {
            border-color: #DC143C !important;
            box-shadow: 0 0 0 3px rgba(220, 20, 60, 0.1) !important;
            background: white !important;
        }

        .amax-send {
            background: linear-gradient(135deg, #DC143C, #B91C3C) !important;
            border: none !important;
            color: white !important;
            width: 50px !important;
            height: 50px !important;
            border-radius: 50% !important;
            cursor: pointer !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            font-size: 20px !important;
            transition: all 0.2s !important;
            font-weight: bold !important;
            box-shadow: 0 4px 12px rgba(220, 20, 60, 0.3) !important;
        }

        .amax-send:hover {
            background: linear-gradient(135deg, #B91C3C, #991b3b) !important;
            transform: scale(1.05) !important;
        }

        .amax-send:disabled {
            background: #ccc !important;
            cursor: not-allowed !important;
            transform: none !important;
        }

        .amax-typing {
            padding: 16px 20px !important;
            color: #666 !important;
            font-style: italic !important;
            font-size: 15px !important;
            display: none !important;
            background: #f8f9fa !important;
            margin: 0 25px !important;
            border-radius: 12px !important;
        }

        .amax-typing.show {
            display: block !important;
        }

        @media (max-width: 800px) {
            .amax-chat {
                width: 100vw !important;
                height: 100vh !important;
                bottom: 0 !important;
                right: 0 !important;
                border-radius: 0 !important;
            }
            .amax-sidebar { 
                width: 140px !important; 
            }
            .amax-chat-area {
                width: calc(100vw - 140px) !important;
            }
        }
    `;

    // State
    let history = [];
    let lastTime = 0;
    let processing = false;

    const quickQuestions = [
        "Total premium July 2024?",
        "Monthly trends chart",
        "Top location by premium?",
        "Revenue report Q3",
        "State breakdown"
    ];

// Based on your AMAX Insurance schema:
    const randomQuestions = [
    // Policy Analysis
    "Show me total premium by policy type this year",
    "Which locations have the highest policy counts?", 
    "Policy status breakdown for Q3 2024",
    
    // Payment Analysis  
    "Payment method distribution across all policies",
    "Average payment amount by organization", 
    "Payment trends over the last 6 months",
    
    // Customer Analysis
    "Top customers by total premium paid",
    "Customer demographics by state",
    "Customer lifecycle analysis",
    
    // Performance Analysis
    "Monthly premium collection trends", 
    "Location performance comparison",
    "Agency fee analysis by region",
    
    // Executive Queries
    "Generate executive dashboard for Q4 2024",
    "Strategic analysis of policy portfolio performance",
    "Revenue optimization opportunities by location"
];

// Add disclaimer
const disclaimer = "*AI-generated queries based on AMAX schema. Results may vary.";
    function generateRandomQuestion() {
        const randomIndex = Math.floor(Math.random() * randomQuestions.length);
        return randomQuestions[randomIndex];
    }

    // CORRECTED: Enhanced chart data parsing for WrenAI API deconstructed format
    function parseChartData(responseText) {
        console.log('🔍 CHART PARSING - Raw response:', responseText.substring(0, 500));
        
        // Handle [CHART] placeholder detection
        if (responseText.includes('[CHART]') || responseText.includes('[CHART:')) {
            console.log('❌ Found [CHART] placeholder - BI Reporter not including actual chart data');
            return 'placeholder';
        }
        
        // Find the start of chart data
        const schemaIndex = responseText.indexOf('$schema:');
        if (schemaIndex === -1) {
            console.log('❌ No $schema: found in response');
            return null;
        }
        
        // Extract chart section
        const chartSection = responseText.substring(schemaIndex);
        const lines = chartSection.split('\n').map(line => line.trim()).filter(line => line);
        
        console.log('📊 Chart section lines:', lines.slice(0, 10));
        
        try {
            const chartObj = {
                "$schema": "https://vega.github.io/schema/vega-lite/v5.json", // Fixed to v5
                "config": {
                    "background": "white",
                    "font": "Roboto, Arial, Noto Sans, sans-serif"
                },
                "width": "container",
                "height": 300
            };
            
            let currentContext = null;
            let currentDataItem = null;
            let dataIndex = -1;
            
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                
                // Parse schema
                if (line.includes('$schema:')) {
                    const schemaUrl = line.split('$schema:')[1].trim();
                    chartObj['$schema'] = schemaUrl;
                    continue;
                }
                
                // Parse title
                if (line.includes('title:')) {
                    chartObj.title = line.split('title:')[1].trim();
                    continue;
                }
                
                // Parse mark configuration
                if (line === 'mark') {
                    currentContext = 'mark';
                    chartObj.mark = { type: 'bar' }; // Default
                    continue;
                }
                
                // Parse data section
                if (line === 'data') {
                    currentContext = 'data';
                    chartObj.data = { values: [] };
                    continue;
                }
                
                // Parse values array
                if (line === 'values' && currentContext === 'data') {
                    currentContext = 'values';
                    continue;
                }
                
                // Parse data items (numeric indices)
                if (line.match(/^\d+$/) && currentContext === 'values') {
                    dataIndex = parseInt(line);
                    currentDataItem = {};
                    chartObj.data.values[dataIndex] = currentDataItem;
                    continue;
                }
                
                // Parse key-value pairs within data items
                if (line.includes(':') && currentDataItem) {
                    const colonIndex = line.indexOf(':');
                    const key = line.substring(0, colonIndex).trim();
                    const value = line.substring(colonIndex + 1).trim();
                    
                    // Convert numeric values
                    const numericValue = parseFloat(value);
                    currentDataItem[key] = isNaN(numericValue) ? value : numericValue;
                    continue;
                }
                
                // Parse mark properties
                if (currentContext === 'mark' && line.includes(':')) {
                    const colonIndex = line.indexOf(':');
                    const key = line.substring(0, colonIndex).trim();
                    const value = line.substring(colonIndex + 1).trim();
                    
                    if (key === 'type') {
                        chartObj.mark.type = value;
                    } else if (key === 'color') {
                        chartObj.mark.color = value;
                    } else if (key === 'tooltip') {
                        chartObj.mark.tooltip = value === 'true';
                    }
                    continue;
                }
                
                // Parse other root-level properties
                if (line.includes(':') && !currentContext) {
                    const colonIndex = line.indexOf(':');
                    const key = line.substring(0, colonIndex).trim();
                    const value = line.substring(colonIndex + 1).trim();
                    
                    if (key === 'width') {
                        chartObj.width = value === 'container' ? 'container' : parseInt(value);
                    } else if (key === 'height') {
                        chartObj.height = parseInt(value);
                    }
                }
            }
            
            // Auto-generate encoding if not provided
            if (!chartObj.encoding && chartObj.data && chartObj.data.values.length > 0) {
                const firstItem = chartObj.data.values[0];
                const keys = Object.keys(firstItem);
                
                if (keys.length >= 2) {
                    chartObj.encoding = {
                        x: { 
                            field: keys[0], 
                            type: 'ordinal',
                            axis: { labelAngle: -45 }
                        },
                        y: { 
                            field: keys[keys.length - 1], 
                            type: 'quantitative',
                            format: keys[keys.length - 1].toLowerCase().includes('premium') ? '$,.0f' : ',.0f'
                        }
                    };
                }
            }
            
            // Set default mark if not specified
            if (!chartObj.mark) {
                chartObj.mark = { type: 'bar', color: '#DC143C', tooltip: true };
            }
            
            console.log('✅ Successfully parsed chart:', chartObj);
            console.log('📊 Data points:', chartObj.data?.values?.length || 0);
            
            return chartObj;
            
        } catch (error) {
            console.error('❌ Chart parsing error:', error);
            console.log('📝 Failed to parse lines:', lines.slice(0, 20));
            return null;
        }
    }

    // CORRECTED: Enhanced renderChart function with v5 compatibility
    async function renderChart(spec) {
        if (!vegaEmbed) {
            console.error('❌ Vega-Embed not loaded');
            const errorDiv = document.createElement('div');
            errorDiv.className = 'chart-error';
            errorDiv.innerHTML = '❌ Chart libraries not loaded';
            return errorDiv;
        }

        const container = document.createElement('div');
        container.className = 'chart-container';
        
        try {
            console.log('🎨 Rendering chart with spec:', spec);
            
            await vegaEmbed(container, spec, {
                theme: 'quartz',
                actions: false,
                renderer: 'svg',
                width: 500,
                height: 300,
                padding: { left: 70, right: 30, top: 50, bottom: 70 }
            });
            
            console.log('✅ Chart rendered successfully');
            return container;
            
        } catch (error) {
            console.error('❌ Chart rendering error:', error);
            console.log('🔍 Chart spec that failed:', spec);
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'chart-error';
            errorDiv.innerHTML = `❌ Chart rendering failed: ${error.message}`;
            return errorDiv;
        }
    }

    // CORRECTED: Enhanced processResponse function
    async function processResponse(data) {
        const container = document.createElement('div');
        const responseText = typeof data.response === 'string' ? data.response : JSON.stringify(data.response, null, 2);
        
        console.log('🔄 PROCESSING RESPONSE:', {
            type: typeof data.response,
            length: responseText.length,
            hasSchema: responseText.includes('$schema:'),
            hasPlaceholder: responseText.includes('[CHART')
        });
        
        const chartSpec = parseChartData(responseText);
        
        // Handle [CHART] placeholder detection
        if (chartSpec === 'placeholder') {
            const debugInfo = document.createElement('div');
            debugInfo.className = 'debug-info';
            debugInfo.innerHTML = '🔧 <strong>Debug:</strong> BI Reporter returned [CHART] placeholder instead of actual chart data.<br>💡 <strong>Fix:</strong> Update BI Reporter system prompt to include full chart data.';
            
            const textDiv = document.createElement('div');
            textDiv.innerHTML = responseText
                .replace(/\[CHART[^\]]*\]/g, '<div class="chart-error">❌ Chart data missing - n8n workflow issue</div>')
                .replace(/\n/g, '<br>');
            
            container.appendChild(debugInfo);
            container.appendChild(textDiv);
            return container;
        }
        
        // Handle successful chart parsing
        if (chartSpec && chartSpec.data && chartSpec.data.values && chartSpec.data.values.length > 0) {
            console.log('✅ Valid chart data found, rendering...');
            
            // Extract text before chart
            const textBeforeChart = responseText.substring(0, responseText.indexOf('$schema:')).trim();
            
            if (textBeforeChart) {
                const textDiv = document.createElement('div');
                textDiv.className = 'response-text';
                textDiv.innerHTML = textBeforeChart.replace(/\n/g, '<br>');
                container.appendChild(textDiv);
            }
            
            // Render chart
            try {
                const chartContainer = await renderChart(chartSpec);
                container.appendChild(chartContainer);
                
                // Add any text after chart if exists
                const textAfterChart = responseText.substring(responseText.lastIndexOf('encoding')).replace(/^.*?\n/, '').trim();
                if (textAfterChart && textAfterChart.length > 10) {
                    const afterDiv = document.createElement('div');
                    afterDiv.className = 'response-text';
                    afterDiv.innerHTML = textAfterChart.replace(/\n/g, '<br>');
                    container.appendChild(afterDiv);
                }
                
            } catch (error) {
                console.error('❌ Chart rendering failed:', error);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'chart-error';
                errorDiv.innerHTML = `❌ Chart rendering failed: ${error.message}`;
                container.appendChild(errorDiv);
            }
            
            return container;
        }
        
        // Handle mentions of charts without data
        if (responseText.toLowerCase().includes('chart') || responseText.toLowerCase().includes('visualization')) {
            console.log('⚠️ Chart mentioned but no data found');
            
            const debugInfo = document.createElement('div');
            debugInfo.className = 'debug-info';
            debugInfo.innerHTML = '🔧 <strong>Debug:</strong> Chart mentioned but no data found.<br>💡 <strong>Possible causes:</strong> generate_chart_tool not called, wrong question classification, or chart data not passed through workflow.';
            
            const textDiv = document.createElement('div');
            textDiv.innerHTML = responseText.replace(/\n/g, '<br>');
            
            container.appendChild(debugInfo);
            container.appendChild(textDiv);
            return container;
        }
        
        // Default text response
        container.innerHTML = responseText.replace(/\n/g, '<br>');
        return container;
    }

    function injectStyles() {
        if (document.getElementById('amax-widget-styles')) return;
        const styleTag = document.createElement('style');
        styleTag.id = 'amax-widget-styles';
        styleTag.textContent = styles;
        document.head.appendChild(styleTag);
    }

    function createWidget() {
        const container = document.createElement('div');
        container.innerHTML = `
            <div class="amax-widget-btn" id="amaxWidgetBtn">
                <img src="${CONFIG.logoUrl}" alt="AMAX BI Assistant">
            </div>
            <div class="amax-chat" id="amaxChat">
                <div class="amax-header">
                    <div class="logo">
                        <div class="logo-icon">
                            <img src="${CONFIG.logoUrl}" alt="AMAX">
                        </div>
                        <h2>AMAX BI Assistant</h2>
                    </div>
                    <button class="amax-close" id="amaxClose">×</button>
                </div>
                <div class="amax-main">
                    <div class="amax-sidebar">
                        <div class="sidebar-section">
                            <h3>Quick Q's</h3>
                            <div id="amaxQuickQuestions"></div>
                            <button class="random-btn" id="randomBtn">🎲 Smart Question</button>
                            <div class="disclaimer">*AI-generated specific queries</div>
                        </div>
                        <div class="history-section">
                            <h3>History</h3>
                            <div class="history-container" id="amaxChatHistory"></div>
                        </div>
                    </div>
                    <div class="amax-chat-area">
                        <div class="amax-messages" id="amaxMessages">
                            <div class="amax-msg bot">Welcome to AMAX! I'm your BI Assistant ready to help with insurance analytics and detailed reports.</div>
                        </div>
                        <div class="amax-typing" id="amaxTyping">Assistant is typing...</div>
                        <div class="amax-input-area">
                            <input type="text" class="amax-input" id="amaxInput" placeholder="Ask about premiums, trends, reports...">
                            <button class="amax-send" id="amaxSend">→</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(container);
        return container;
    }

    function setupEventListeners() {
        const widgetBtn = document.getElementById('amaxWidgetBtn');
        const chat = document.getElementById('amaxChat');
        const closeBtn = document.getElementById('amaxClose');
        const input = document.getElementById('amaxInput');
        const sendBtn = document.getElementById('amaxSend');
        const randomBtn = document.getElementById('randomBtn');

        widgetBtn.addEventListener('click', () => {
            chat.classList.toggle('open');
            if (chat.classList.contains('open')) {
                input.focus();
            }
        });

        closeBtn.addEventListener('click', () => {
            chat.classList.remove('open');
        });

        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !processing) {
                sendMessage();
            }
        });

        sendBtn.addEventListener('click', () => {
            if (!processing) {
                sendMessage();
            }
        });

        randomBtn.addEventListener('click', () => {
            const randomQuestion = generateRandomQuestion();
            sendMessage(randomQuestion);
        });

        setupQuickQuestions();
        setupHistory();
    }

    function setupQuickQuestions() {
        const container = document.getElementById('amaxQuickQuestions');
        quickQuestions.forEach(question => {
            const btn = document.createElement('button');
            btn.className = 'quick-btn';
            btn.textContent = question;
            btn.onclick = () => sendMessage(question);
            container.appendChild(btn);
        });
    }

    function setupHistory() {
        updateHistory();
    }

    function addToHistory(message) {
        history.unshift(message);
        if (history.length > 10) history.pop();
        updateHistory();
    }

    function updateHistory() {
        const container = document.getElementById('amaxChatHistory');
        container.innerHTML = '';
        
        history.slice(0, 5).forEach(item => {
            const div = document.createElement('div');
            div.className = 'history-item';
            div.textContent = item.length > 25 ? item.substring(0, 25) + '...' : item;
            div.onclick = () => sendMessage(item);
            container.appendChild(div);
        });
    }

    function addMessage(content, isUser = false, isError = false) {
        const messages = document.getElementById('amaxMessages');
        const msg = document.createElement('div');
        msg.className = `amax-msg ${isUser ? 'user' : isError ? 'error' : 'bot'}`;
        
        if (typeof content === 'string') {
            msg.innerHTML = content.replace(/\n/g, '<br>');
        } else {
            msg.appendChild(content);
        }
        
        messages.appendChild(msg);
        messages.scrollTop = messages.scrollHeight;
    }

    function showTyping() {
        const typing = document.getElementById('amaxTyping');
        typing.classList.add('show');
        const messages = document.getElementById('amaxMessages');
        messages.scrollTop = messages.scrollHeight;
    }

    function hideTyping() {
        const typing = document.getElementById('amaxTyping');
        typing.classList.remove('show');
    }

    async function sendMessage(text) {
        const input = document.getElementById('amaxInput');
        const sendBtn = document.getElementById('amaxSend');
        
        const message = text || input.value.trim();
        if (!message) return;

        const now = Date.now();
        if (processing || now - lastTime < CONFIG.rateLimit) return;

        lastTime = now;
        processing = true;
        input.value = '';

        addMessage(message, true);
        addToHistory(message);

        input.disabled = true;
        sendBtn.disabled = true;
        showTyping();

        try {
            const response = await fetch(CONFIG.webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    question: message,
                    sessionId: `amax_${Date.now()}`,
                    userId: `user_${Math.random().toString(36).substr(2, 9)}`
                })
            });

            if (!response.ok) {
                throw new Error(`Server error: ${response.status}`);
            }

            const data = await response.json();
            console.log('🔍 RAW BACKEND RESPONSE:', data);
            const content = await processResponse(data);
            addMessage(content, false);

        } catch (error) {
            console.error('Connection error:', error);
            addMessage('Connection error. Please try again.', false, true);
        } finally {
            hideTyping();
            processing = false;
            input.disabled = false;
            sendBtn.disabled = false;
            input.focus();
        }
    }

    function init() {
        injectStyles();
        createWidget();
        setupEventListeners();
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            loadVegaLite().then(init).catch(console.error);
        });
    } else {
        loadVegaLite().then(init).catch(console.error);
    }

})();
